{
    "gulpfile.js for ES6, Browserify & SASS projects": {
        "prefix": "glpfys",
        "body": [
            "// Define plugins",
            "var gulp = require('gulp'),",
            "\tbrowserify = require('browserify'),",
            "\tbuffer = require('vinyl-buffer'),",
            "\tsource = require('vinyl-source-stream');",
            "var bs = require('browser-sync').create();",
            "var $ = require('gulp-load-plugins')();",
            "",
            "// Process the app JavaScript (own and required)",
            "gulp.task('scripts', function() {",
            "\tvar b = browserify({",
            "\t\tentries: './src/js/app.js',",
            "\t\tdebug: true",
            "\t});",
            "",
            "\treturn b.bundle()",
            "\t\t.pipe(source('./app.js'))",
            "\t\t.pipe(buffer())",
            "\t\t.pipe($.sourcemaps.init({loadMaps: true}))",
            "\t\t.pipe($.babel())",
            "\t\t.pipe($.uglify())",
            "\t\t.on('error', $.util.log)",
            "\t\t.pipe($.sourcemaps.write('./'))",
            "\t\t.pipe(gulp.dest('./app/js'));",
            "});",
            "// Process SASS files",
            "gulp.task('styles', function () {",
            "\treturn gulp.src('./src/sass/*.scss')",
            "\t\t.pipe($.sourcemaps.init({loadMaps: true}))",
            "\t\t.pipe($.sass({outputStyle: 'compressed'}))",
            "\t\t.pipe($.autoprefixer({",
            "\t\t\tbrowsers: ['last 2 versions'],",
            "\t\t\tcascade: false",
            "\t\t}))",
            "\t\t.on('error', $.util.log)",
            "\t\t.pipe($.sourcemaps.write('./'))",
            "\t\t.pipe(gulp.dest('./app/css'));",
            "});",
            "",
            "// Process HTML files",
            "gulp.task('htmlmin', function() {",
            "\treturn gulp.src('./src/*.html')",
            "\t\t.pipe($.sourcemaps.init({loadMaps: true}))",
            "\t\t.pipe($.htmlmin({",
            "\t\t\tcollapseWhitespace: true,",
            "\t\t\tcollapseInlineTagWhitespace: true,",
            "\t\t\tremoveTagWhitespace: true,",
            "\t\t\tremoveComments: true,",
            "\t\t\tremoveRedundantAttributes: true,",
            "\t\t\tremoveScriptTypeAttributes: true,",
            "\t\t\tremoveStyleLinkTypeAttributes: true,",
            "\t\t\tminifyJS: true,",
            "\t\t\tminifyCSS: true",
            "\t\t}))",
            "\t\t.on('error', $.util.log)",
            "\t\t.pipe($.sourcemaps.write('./'))",
            "\t\t.pipe(gulp.dest('./app'));",
            "});",
            "",
            "// Serve and watch for changes in files",
            "gulp.task('serve', function() {",
            "\tbs.init({",
            "\t\tserver: './app'",
            "\t});",
            "\tvar appFiles = ['./app/*', './app/js/*', './app/css/*'];",
            "\tgulp.watch('./src/js/*.js', ['scripts']);",
            "\tgulp.watch('./src/sass/*.scss', ['styles']);",
            "\t\tgulp.watch('./src/*.html', ['htmlmin']);",
            "\tgulp.watch(appFiles).on('change',bs.reload);",
            "});",
            "",
            "gulp.task('default', ['scripts', 'styles', 'htmlmin', 'serve']);"
        ],
        "description": "gulpfile.js for ES6, Browserify & SASS projects"
    },
    "gulpfile.js for ES6 & SASS projects": {
      "prefix": "glps",
      "body": [
        "// Define plugins",
        "var gulp = require('gulp');",
        "var bs = require('browser-sync').create();",
        "var $ = require('gulp-load-plugins')();",
        "",
        "// Process the app JavaScript (own and required)",
        "gulp.task('scripts', function() {",
        "\treturn gulp.src('./src/js/app.js')",
        "\t\t.pipe($.sourcemaps.init({loadMaps: true}))",
        "\t\t.pipe($.babel())",
        "\t\t.pipe($.uglify())",
        "\t\t.on('error', $.util.log)",
        "\t\t.pipe($.sourcemaps.write('./'))",
        "\t\t.pipe(gulp.dest('./app/js'));",
        "\t});",
        "",
        "// Process SASS files",
        "gulp.task('styles', function () {",
        "\treturn gulp.src('./src/sass/*.scss')",
        "\t\t.pipe($.sourcemaps.init({loadMaps: true}))",
        "\t\t.pipe($.sass({outputStyle: 'compressed'}))",
        "\t\t.pipe($.autoprefixer({",
        "\t\t\tbrowsers: ['last 2 versions'],",
        "\t\t\tcascade: false",
        "\t\t}))",
        "\t\t.pipe($.cleanCss({compatibility: 'ie8'}))",
        "\t\t.on('error', $.util.log)",
        "\t\t.pipe($.sourcemaps.write('./'))",
        "\t\t.pipe(gulp.dest('./app/css'));",
        "\t});",
        "",
        "// Process HTML files",
        "gulp.task('htmlmin', function() {",
        "\treturn gulp.src('./src/*.html')",
        "\t\t.pipe($.sourcemaps.init({loadMaps: true}))",
        "\t\t.pipe($.htmlmin({",
        "\t\t\tcollapseWhitespace: true,",
        "\t\t\tcollapseInlineTagWhitespace: true,",
        "\t\t\tremoveTagWhitespace: true,",
        "\t\t\tremoveComments: true,",
        "\t\t\tremoveRedundantAttributes: true,",
        "\t\t\tremoveScriptTypeAttributes: true,",
        "\t\t\tremoveStyleLinkTypeAttributes: true,",
        "\t\t\tminifyJS: true,",
        "\t\t\tminifyCSS: true",
        "\t\t}))",
        "\t\t.on('error', $.util.log)",
        "\t\t.pipe($.sourcemaps.write('./'))",
        "\t\t.pipe(gulp.dest('./app'));",
        "});",
        "",
        "// Serve and watch for changes in files",
        "gulp.task('serve', function() {",
        "\t\tbs.init({",
        "\t\t\tserver: './app'",
        "\t\t});",
        "\t\tvar appFiles = ['./app/*', './app/js/*', './app/css/*'];",
        "\t\tgulp.watch('./src/js/*.js', ['scripts']);",
        "\t\tgulp.watch('./src/sass/*.scss', ['styles']);",
        "\t\tgulp.watch('./src/*.html', ['htmlmin']);",
        "\t\tgulp.watch(appFiles).on('change',bs.reload);",
        "});",
        "",
        "gulp.task('default', ['scripts', 'styles', 'htmlmin', 'serve']);"
      ],
      "description": "gulpfile.js for ES6 & SASS projects"
    },
    "Immediately-Invoked Function Expression (IIFE)": {
      "prefix": "iife",
      "body": [
        "(function(){",
        "\t$1",
        "})();"
      ],
      "description": "Immediately-Invoked Function Expression (IIFE)"
    }
}